"""
this will plot 1 of 3 hard-coded paths for pretty picture
balloon path digitized from Lebonnois 2017 [paper in HW->cited] (note zip file has actual data from Lebonnois 2017 via personal communication w/ Lebonnois - didn't get to incorporate it here)
tesserae map from Gilmore et al., 2020 [paper in HW->cited], edited to remove dots but dot copy still there
tesserae outlines digitized from Gilmore et al., 2020 tesserae map, if you want to add more they can only have 4 corners to work with the alg
this doesn't have support for the regions that the tesseraeStatz does
licensed under MIT (note subfun_figFitter is GPL-3.0 via previous https://github.com/dinsmoro/GRITI release)
"""
import numpy as np
from scipy import interpolate
import os
import pickle as pkl
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from mpl_toolkits.axes_grid1 import make_axes_locatable
try:
    from subfun_figFitter import figFitter
except:
    pass;
#END TRY
#--- inputs ---
days = 9; #days to check
obsGoal = 4; #number of observations needed to reach goal
daysPerCircum = 4.5; #days per circumnavigation [6.8 via estimate math, 4.5 via people]
landingCoords = np.array((100+180,0)); #long, lat for West Ovda optimal insertion point
dataRate = 10; #[datapts/sec; Hz] sampling rate
ptsInTesseraeReq = 10; #pts needed to make a tesserae measurement count
paths = 'equatorial'; #'all' does all paths, or can do 'upper', 'equatorial', or 'lower' to get 3 different individual paths
#plot stuff
plot_latLim = 90; #+/- latitude limit to plot to
plot_latSpacing = 15; #spacing between latitude axis pts
plot_toGoalOnly = False; #plots line to goal, green check at end
toGoal = [4,6,6]; #the goals to go to (special from obsGoal!)
#cache
cacheItUp = False; #false to turn off, true to turn on. use for re-runs

#--- Calcs from Above ---
dataPtsPerCircum = np.int64(np.floor(daysPerCircum*86400*dataRate)); #data pts per circum
circums = days/daysPerCircum; #circumnavigations
longPerCircum = 360; #[long/circum]

#--- build platform path for latitude/days ---
platformPaths = {}; #make a dict
#data pulled from Lebonnois 2017 Fig 3 upper middle plot teal line [X: days, Y: latitude]
platformPath_raw = np.array(((0,0),
(0.16962843295638308, 0.4215456674473046),
(0.4604200323101786, 3.2318501170960303),
(0.7512116316639776, 6.042154566744742),
(1.0420032310177731, 8.290398126463714),
(1.6235864297253677, 11.100702576112425),
(2.2051696284329587, 12.224824355971904),
(3.077544426494349, 11.100702576112425),
(3.949919224555739, 8.85245901639344),
(4.531502423263333, 6.6042154566744955),
(5.113085621970921, 4.355971896955509),
(5.40387722132472, 2.107728337236537),
(5.694668820678515, -0.14051522248243487),
(5.9854604200323145, -2.3887587822013927),
(6.27625201938611, -4.637002341920365),
(6.8578352180937046, -6.885245901639337),
(7.1486268174475, -9.133489461358309),
(7.439418416801292, -11.381733021077267),
(8.021001615508887, -13.0679156908665),
(8.893376413570277, -13.629976580796239),
(9.765751211631663, -13.0679156908665),
(10.056542810985462, -11.381733021077267),
(10.347334410339258, -9.695550351288048),
(10.447334410339258, -8.00936768149883),
(10.638126009693057, -6.323185011709597),
(10.928917609046852, -4.637002341920365),
(11.219709208400651, -2.950819672131132),
(11.510500807754447, -1.2646370023418996),
(11.801292407108242, -0.14051522248243487),
(12.382875605815833, -0.14051522248243487),
(12.964458804523428, -1.826697892271639),
(13.546042003231022, -3.5128805620608716),
(13.836833602584818, -4.637002341920365),
(14.418416801292409, -5.199063231850104),
(15, -5.761124121779844),
(15.290791599353796, -6.323185011709597),
(15.872374798061394, -5.199063231850104),
(16.453957996768985, -5.761124121779844),
(17.035541195476583, -5.761124121779844),
(17.32633279483037, -4.637002341920365),
(17.90791599353797, -4.074941451990625),
(18.48949919224556, -4.074941451990625),
(19.07108239095315, -4.074941451990625),
(19.361873990306954, -2.950819672131132),
(19.652665589660742, -1.826697892271639),
(19.943457189014538, -0.7025761124121743),
(20.23424878836834, 0.4215456674473046),
(20.35424878836834, 1.5456674473067977),
(20.525040387722136, 2.669789227166291),
(20.81583198707593, 3.7939110070257698),
(20.91583198707593, 4.918032786885263),
(21.106623586429727, 6.042154566744742),
(21.206623586429727, 7.166276346604235),
(21.397415185783522, 8.290398126463714),
(21.97899838449112, 8.290398126463714),
(22.26978998384491, 7.166276346604235),
(22.56058158319871, 6.042154566744742),
(22.70058158319871, 4.918032786885263),
(22.851373182552507, 3.7939110070257698),
(22.901373182552507, 2.669789227166291),
(22.951373182552507, 1.5456674473067977),
(23.051373182552507, 0.4215456674473046),
(23.142164781906303, -0.7025761124121743),
(23.242164781906303, -1.826697892271639),
(23.432956381260098, -2.950819672131132),
(23.532956381260098, -4.074941451990625),
(23.723747980613894, -5.199063231850104),
(23.823747980613894, -6.885245901639337),
(23.923747980613894, -8.00936768149883),
(24.01453957996769, -9.133489461358309),
(24.305331179321485, -10.819672131147527),
(24.59612277867528, -11.943793911007006),
(25.177705977382878, -11.943793911007006),
(25.468497576736674, -10.819672131147527),
(25.75928917609047, -9.695550351288048),
(26.050080775444272, -8.57142857142857),
(26.340872374798067, -7.447306791569076),
(26.440872374798067, -6.323185011709597),
(26.631663974151863, -5.199063231850104),
(26.831663974151863, -3.5128805620608716),
(26.92245557350566, -1.826697892271639),
(27.213247172859454, -0.14051522248243487),
(27.313247172859454, 1.5456674473067977),
(27.504038772213256, 3.2318501170960303),
(27.794830371567052, 4.918032786885263),
(28.376413570274636, 5.480093676815002),
(28.957996768982227, 6.042154566744742),
(29.539579967689825, 6.6042154566744955),
(30.121163166397416, 7.166276346604235),
(30.99353796445881, 7.166276346604235),
(31.5751211631664, 7.728337236533974),
(31.865912762520196, 8.85245901639344),
(32.447495961227794, 9.976580796252932),
(32.73828756058159, 11.100702576112425),
(33.319870759289174, 11.100702576112425),
(33.61066235864297, 9.414519906323193),
(33.90145395799677, 7.728337236533974),
(34.19224555735057, 6.6042154566744955),
(34.48303715670436, 5.480093676815002),
(34.77382875605816, 4.355971896955509)));
platformPaths['equatorial'] = np.copy(platformPath_raw); #record

#data pulled from Lebonnois 2017 Fig 3 lower middle plot lime green line (peaks to 60 at 15 days almost exactly) [X: days, Y: latitude]
platformPath_raw = np.array(((0,0),
(0.07167235494871527, 0.2380952380962924),
(0.3174061433446198, 1.190476190477213),
(0.5631399317405243, 2.1428571428581478),
(0.8088737201364289, 2.857142857143856),
(1.0546075085323352, 3.571428571429564),
(1.300341296928238, 4.285714285715258),
(1.5460750853241443, 5.000000000000952),
(1.9146757679180002, 5.952380952381901),
(2.1604095563139047, 6.666666666667609),
(2.5290102389077624, 7.619047619048544),
(2.8976109215016184, 8.095238095238997),
(3.389078498293429, 8.571428571429465),
(3.757679180887285, 9.285714285715173),
(4.249146757679094, 10.238095238096108),
(4.61774744027295, 10.714285714286575),
(5.109215017064759, 10.952380952381816),
(5.600682593856568, 10.952380952381816),
(5.969283276450426, 11.428571428572283),
(6.460750853242235, 12.142857142857977),
(6.952218430034044, 12.857142857143685),
(7.320819112627905, 13.57142857142938),
(7.8122866894197145, 13.80952380952462),
(8.303754266211524, 13.80952380952462),
(8.795221843003329, 14.047619047619861),
(9.286689419795138, 14.523809523810328),
(9.593856655290022, 15.238095238096008),
(9.77815699658695, 15.714285714286476),
(10.023890784982854, 16.428571428572184),
(10.146757679180805, 17.380952380953133),
(10.392491467576711, 18.095238095238827),
(10.638225255972618, 19.04761904761976),
(10.761092150170569, 20.476190476191164),
(11.006825938566472, 21.666666666667325),
(11.129692832764423, 22.619047619048274),
(11.252559726962378, 24.047619047619676),
(11.498293515358284, 25.47619047619108),
(11.74402730375419, 27.14285714285772),
(11.866894197952142, 28.333333333333883),
(11.989761092150093, 29.285714285714818),
(12.112627986348045, 30.238095238095752),
(12.358361774743948, 31.190476190476687),
(12.481228668941903, 32.619047619048104),
(12.726962457337809, 33.809523809524265),
(12.849829351535757, 35.00000000000043),
(12.972696245733708, 36.19047619047661),
(13.095563139931663, 37.857142857143245),
(13.34129692832757, 39.52380952380988),
(13.46416382252552, 40.95238095238128),
(13.587030716723476, 42.61904761904792),
(13.709897610921427, 43.80952380952409),
(13.832764505119375, 45.2380952380955),
(13.95563139931733, 46.428571428571665),
(14.078498293515281, 48.80952380952401),
(14.201365187713233, 51.90476190476205),
(14.447098976109139, 54.52380952380962),
(14.692832764505045, 56.428571428571495),
(14.815699658702993, 59.047619047619065),
(15.184300341296854, 59.99999999999999),
(15.43003412969276, 59.2857142857143),
(15.798634812286615, 58.09523809523813),
(15.921501706484566, 56.19047619047626),
(16.167235494880472, 54.04761904761915),
(16.290102389078424, 51.90476190476205),
(16.41296928327638, 50.238095238095404),
(16.658703071672285, 48.0952380952383),
(16.781569965870233, 45.95238095238119),
(17.02730375426614, 44.04761904761932),
(17.395904436859997, 41.904761904762225),
(17.641638225255896, 40.23809523809558),
(17.887372013651802, 38.333333333333705),
(18.50170648464157, 35.4761904761909),
(18.993174061433375, 34.047619047619506),
(19.361774744027233, 32.85714285714333),
(19.730375426621087, 31.904761904762395),
(20.09897610921495, 30.95238095238146),
(20.467576791808806, 29.52380952381006),
(20.83617747440266, 27.857142857143415),
(21.204778156996518, 26.666666666667254),
(21.327645051194473, 25.714285714286305),
(21.696245733788324, 25.00000000000061),
(22.06484641638219, 24.047619047619676),
(22.556313993173994, 22.380952380953033),
(22.92491467576785, 21.428571428572113),
(23.170648464163754, 20.476190476191164),
(23.539249146757612, 20.238095238095937),
(24.153583617747373, 20.238095238095937),
(24.890784982935088, 21.190476190476872),
(25.50511945392485, 21.190476190476872),
(26.119453924914616, 21.190476190476872),
(26.488054607508467, 20.714285714286405),
(26.97952218430028, 20.714285714286405),
(27.470989761092085, 21.666666666667325),
(27.839590443685942, 23.09523809523874),
(28.2081911262798, 24.285714285714903),
(28.699658703071613, 25.00000000000061),
(29.313993174061373, 25.00000000000061),
(29.805460750853186, 24.761904761905384),
(30.29692832764499, 24.285714285714903),
(31.034129692832707, 24.285714285714903),
(31.64846416382246, 25.00000000000061),
(32.13993174061427, 25.714285714286305),
(32.50853242320812, 26.90476190476248),
(32.877133105801995, 28.333333333333883),
(33.1228668941979, 29.285714285714818),
(33.368600682593794, 30.714285714286234),
(33.860068259385606, 31.190476190476687),
(34.35153583617742, 31.904761904762395),
(34.84300341296923, 32.85714285714333),
(35.21160409556309, 33.809523809524265),
(35.58020477815694, 34.28571428571473),
(36.1945392491467, 34.7619047619052),
(36.68600682593851, 33.57142857142904),
(36.93174061433442, 32.619047619048104),
(37.30034129692827, 32.142857142857636),
(37.79180887372008, 32.619047619048104),
(38.160409556313944, 33.809523809524265),
(38.5290102389078, 34.7619047619052),
(38.774744027303704, 35.952380952381375),
(39.020477815699614, 36.9047619047623),
(39.26621160409551, 38.09523809523848),
(39.389078498293465, 39.04761904761941),
(39.63481228668937, 39.761904761905114),
(40.003412969283225, 40.000000000000355),
(40.37201365187708, 39.761904761905114),
(40.863481228668896, 39.28571428571465),
(41.10921501706479, 38.80952380952418),
(41.47781569965865, 38.333333333333705),
(41.846416382252514, 39.04761904761941),
(42.09215017064842, 40.000000000000355),
(42.460750853242274, 40.23809523809558),
(42.706484641638184, 39.28571428571465),
(43.075085324232035, 38.333333333333705),
(43.44368600682589, 38.09523809523848),
(43.689419795221795, 39.04761904761941),
(43.935153583617705, 40.23809523809558),
(44.05802047781565, 41.42857142857176),
(44.30375426621156, 41.904761904762225),
(44.67235494880542, 42.85714285714315),
(44.918088737201316, 43.09523809523839),
(45.40955631399313, 42.380952380952685),
(45.65529010238903, 40.95238095238128),
(45.778156996586986, 39.761904761905114),
(45.90102389078494, 38.57142857142894),
(46.02389078498289, 37.142857142857544),
(46.14675767918086, 36.19047619047661),
(46.2696245733788, 35.00000000000043),
(46.392491467576754, 34.047619047619506),
(46.7610921501706, 32.619047619048104),
(47.12969283276446, 31.904761904762395),
(47.74402730375422, 30.714285714286234),
(48.481228668941945, 30.238095238095752),
(49.0955631399317, 29.52380952381006),
(49.95563139931737, 29.285714285714818),
(50.69283276450508, 29.285714285714818),
(51.30716723549484, 29.761904761905285),
(51.921501706484605, 30.714285714286234),
(52.41296928327642, 31.904761904762395),
(52.65870307167232, 33.3333333333338),
(53.02730375426617, 34.7619047619052),
(53.27303754266208, 35.952380952381375),
(53.88737201365184, 36.66666666666707),
(54.5017064846416, 35.952380952381375),
(54.87030716723545, 35.23809523809567),
(55.36177474402727, 35.00000000000043),
(55.73037542662112, 35.4761904761909),
(55.97610921501703, 36.66666666666707),
(56.09897610921499, 37.857142857143245),
(56.34470989761088, 39.28571428571465),
(56.34470989761088, 40.476190476190816),
(56.59044368600679, 41.904761904762225),
(56.59044368600679, 43.33333333333363),
(56.71331058020475, 44.76190476190503),
(56.83617747440269, 46.19047619047643),
(56.959044368600644, 47.619047619047834),
(57.0819112627986, 49.04761904761924),
(57.32764505119451, 50.476190476190645),
(57.45051194539246, 51.42857142857157),
(57.819112627986314, 51.666666666666806),
(58.187713310580165, 51.666666666666806),
(58.679180887371984, 51.190476190476346),
(58.92491467576788, 49.76190476190494),
(59.047781569965835, 48.333333333333535),
(59.293515358361745, 47.142857142857366),
(59.4163822525597, 45.47619047619073),
(59.66211604095561, 43.80952380952409),
(59.66211604095561, 42.380952380952685),
(59.907849829351505, 41.19047619047652),
(60.39931740614331, 40.476190476190816),
(61.01365187713307, 40.71428571428605),
(61.50511945392489, 41.904761904762225),
(61.627986348122846, 43.57142857142886),
(61.87372013651874, 45.2380952380955),
(61.9965870307167, 46.90476190476213)));
platformPaths['upper'] = np.copy(platformPath_raw); #record

#data pulled from Lebonnois 2017 Fig 3 lower middle plot greenest line (peaks under -30 a bit before 30 days) [X: days, Y: latitude]
platformPath_raw = np.array(((0,0),
(0.06666666666666998, 0.25862068965516016),
(0.3333333333333357, 1.5517241379310178),
(0.6000000000000014, 2.5862068965517153),
(0.7333333333333378, 4.137931034482747),
(1.0000000000000036, 5.431034482758605),
(1.4000000000000021, 6.465517241379288),
(1.6666666666666679, 8.01724137931032),
(1.9333333333333371, 9.310344827586192),
(2.3333333333333393, 10.603448275862064),
(2.7333333333333343, 12.41379310344827),
(3.133333333333333, 13.706896551724114),
(3.2666666666666693, 14.741379310344811),
(3.6666666666666714, 14.999999999999986),
(4.333333333333336, 14.224137931034477),
(4.733333333333334, 12.67241379310343),
(5.133333333333336, 11.637931034482733),
(5.533333333333335, 10.34482758620689),
(5.800000000000001, 9.051724137931018),
(5.933333333333337, 7.75862068965516),
(6.333333333333336, 6.724137931034463),
(6.600000000000001, 5.172413793103445),
(6.866666666666671, 4.137931034482747),
(7.133333333333333, 2.8448275862068755),
(7.400000000000002, 1.034482758620669),
(7.666666666666671, -0.517241379310363),
(7.933333333333334, -2.068965517241395),
(8.200000000000003, -4.137931034482776),
(8.333333333333336, -5.689655172413808),
(8.733333333333334, -7.758620689655189),
(9.000000000000004, -9.568965517241395),
(9.26666666666667, -11.379310344827601),
(9.533333333333335, -13.448275862068968),
(9.8, -15.775862068965537),
(10.2, -17.586206896551744),
(10.466666666666669, -19.137931034482776),
(10.733333333333338, -20.948275862068982),
(11.133333333333333, -21.982758620689665),
(11.533333333333335, -21.72413793103449),
(11.666666666666671, -20.689655172413822),
(11.933333333333334, -19.39655172413795),
(12.200000000000003, -17.844827586206918),
(12.466666666666669, -16.551724137931046),
(12.866666666666667, -15.258620689655174),
(13.266666666666666, -13.965517241379331),
(13.533333333333339, -12.931034482758633),
(13.933333333333337, -12.155172413793125),
(14.333333333333336, -11.120689655172427),
(14.866666666666667, -10.344827586206918),
(15.399999999999999, -9.31034482758622),
(15.933333333333337, -9.31034482758622),
(16.46666666666667, -9.82758620689657),
(17, -10.344827586206918),
(17.53333333333334, -9.31034482758622),
(17.799999999999997, -8.275862068965523),
(18.200000000000003, -7.241379310344854),
(18.46666666666667, -6.724137931034491),
(19.13333333333334, -6.2068965517241566),
(19.4, -5.172413793103473),
(19.93333333333333, -4.65517241379311),
(20.333333333333336, -5.689655172413808),
(20.733333333333334, -6.724137931034491),
(21, -7.758620689655189),
(21.266666666666666, -8.534482758620697),
(21.666666666666664, -9.568965517241395),
(22.06666666666667, -10.862068965517267),
(22.46666666666667, -12.155172413793125),
(23.000000000000007, -12.931034482758633),
(23.666666666666664, -12.413793103448299),
(24.200000000000003, -12.413793103448299),
(24.73333333333334, -13.189655172413808),
(25.133333333333333, -13.706896551724142),
(25.53333333333333, -14.482758620689665),
(25.933333333333337, -15.775862068965537),
(26.06666666666667, -17.06896551724138),
(26.33333333333333, -18.620689655172427),
(26.6, -19.913793103448285),
(26.733333333333334, -21.46551724137933),
(26.866666666666667, -23.275862068965537),
(27, -25.086206896551744),
(27.133333333333333, -27.413793103448285),
(27.400000000000006, -30.258620689655174),
(27.66666666666667, -32.32758620689657),
(27.93333333333333, -35.43103448275863),
(28.066666666666663, -36.98275862068968),
(28.46666666666667, -37.5),
(28.6, -35.94827586206898),
(28.866666666666667, -33.87931034482759),
(29, -31.81034482758622),
(29.266666666666673, -29.741379310344854),
(29.400000000000006, -27.931034482758633),
(29.53333333333333, -26.120689655172427),
(29.799999999999997, -24.051724137931046),
(30.13333333333334, -21.982758620689665),
(30.266666666666666, -20.17241379310346),
(30.46666666666667, -18.620689655172427),
(30.6, -16.81034482758622),
(31.000000000000007, -15.517241379310363),
(31.4, -14.482758620689665),
(32.2, -14.224137931034505),
(32.46666666666666, -15.000000000000014),
(33.13333333333333, -15.258620689655174),
(33.66666666666667, -15.258620689655174),
(34.33333333333333, -16.03448275862071),
(34.733333333333334, -17.06896551724138),
(35.13333333333333, -18.10344827586208),
(35.66666666666667, -19.655172413793125),
(35.93333333333333, -21.72413793103449),
(36.333333333333336, -23.534482758620697),
(36.46666666666667, -25.60344827586208),
(36.733333333333334, -27.931034482758633),
(36.86666666666667, -30.258620689655174),
(37.13333333333334, -33.10344827586209),
(37.26666666666667, -35.94827586206898),
(37.53333333333333, -39.051724137931046),
(37.666666666666664, -41.896551724137936),
(37.93333333333333, -44.741379310344854),
(38.2, -47.586206896551744),
(38.46666666666667, -49.913793103448285),
(38.866666666666674, -52.241379310344854),
(39.13333333333333, -54.051724137931046),
(39.4, -55.086206896551744),
(40.06666666666667, -55.086206896551744),
(40.33333333333333, -53.79310344827587),
(40.599999999999994, -51.4655172413793),
(40.733333333333334, -49.396551724137936),
(41, -46.81034482758622),
(41.13333333333333, -44.48275862068965),
(41.266666666666666, -42.15517241379311),
(41.4, -39.568965517241395),
(41.53333333333334, -37.241379310344826),
(41.66666666666667, -34.913793103448285),
(41.800000000000004, -32.586206896551744),
(42.06666666666666, -30.51724137931035),
(42.199999999999996, -28.448275862068982),
(42.33333333333333, -26.637931034482776),
(42.6, -24.82758620689657),
(42.86666666666667, -22.50000000000003),
(43.13333333333333, -20.689655172413822),
(43.400000000000006, -18.879310344827587),
(43.8, -17.32758620689657),
(44.33333333333334, -16.293103448275872),
(45, -16.03448275862071),
(45.400000000000006, -14.74137931034484),
(45.93333333333334, -13.706896551724142),
(46.33333333333333, -12.413793103448299),
(46.866666666666674, -11.379310344827601),
(47.266666666666666, -10.603448275862092),
(48.06666666666666, -11.379310344827601),
(48.46666666666667, -12.155172413793125),
(48.866666666666674, -13.448275862068968),
(49.266666666666666, -15.000000000000014),
(49.66666666666667, -16.293103448275872),
(49.8, -17.844827586206918),
(50.2, -19.39655172413795),
(50.733333333333334, -19.39655172413795),
(51.400000000000006, -18.10344827586208),
(52.06666666666666, -18.10344827586208),
(52.599999999999994, -18.620689655172427),
(53.13333333333334, -20.431034482758633),
(53.266666666666666, -21.72413793103449),
(53.66666666666666, -24.310344827586235),
(53.93333333333334, -26.3793103448276),
(54.06666666666666, -28.965517241379317),
(54.2, -31.293103448275872),
(54.46666666666667, -33.36206896551727),
(54.599999999999994, -36.46551724137933),
(54.733333333333334, -39.31034482758622),
(55, -41.12068965517241),
(55.13333333333334, -42.93103448275863),
(55.39999999999999, -44.48275862068965),
(55.8, -45.2586206896552),
(56.06666666666666, -46.551724137931046),
(56.60000000000001, -46.81034482758622),
(57.133333333333326, -45.77586206896552),
(57.266666666666666, -44.224137931034505),
(57.53333333333333, -42.67241379310346),
(57.93333333333334, -41.63793103448279),
(58.599999999999994, -40.86206896551724),
(58.86666666666666, -39.31034482758622),
(59.133333333333326, -37.758620689655174),
(59.266666666666666, -36.20689655172416),
(59.400000000000006, -34.65517241379311),
(59.66666666666667, -32.84482758620692),
(59.93333333333332, -30.775862068965523),
(60.33333333333333, -28.448275862068982),
(60.46666666666667, -27.15517241379311),
(61, -25.862068965517267),
(61.400000000000006, -24.310344827586235),
(61.53333333333333, -23.275862068965537),
(62.06666666666666, -21.72413793103449),
(62.46666666666667, -21.206896551724157),
(62.866666666666674, -21.982758620689665),
(63.13333333333334, -23.275862068965537),
(63.53333333333333, -24.310344827586235),
(64.06666666666666, -24.568965517241395),
(64.60000000000001, -23.793103448275872),
(65, -24.051724137931046),
(65.66666666666666, -25.086206896551744),
(65.93333333333334, -25.862068965517267),
(66.6, -26.120689655172427)));
platformPaths['lower'] = np.copy(platformPath_raw); #record

#--- build tesserae box list ---
tbox = []; #[X: longitude, Y: latitude] boxes from Gilmore et al. 2020 tesserae plot roughly
tbox.append([np.array(((-2.228335625859671, -27.092783505154642),
(7.9229711141678365, -32.041237113402076),
(12.379642365887236, -21.154639175257728),
(1.9807427785419804, -17.44329896907216))),2]);
tbox.append([np.array(((55.21320495185694, -15.216494845360828),
(104.97936726272354, -11.257731958762875),
(106.21733149931225, 5.567010309278345),
(58.6795048143054, 5.814432989690729))),1]);
tbox.append([np.array(((114.63548830811555, -4.824742268041234),
(139.39477303988997, -3.0927835051546424),
(136.67125171939477, -17.69072164948453),
(119.58734525447045, -11.75257731958763))),5]);
tbox.append([np.array(((111.911967,	-0.618556701),
(114.3878955,	8.783505155),
(124.786795,	8.536082474),
(119.8349381,	-1.608247423))),5]);
tbox.append([np.array(((127.7579092,	2.350515464),
(127.0151307,	9.773195876),
(139.394773,	6.309278351),
(140.1375516,	0.12371134))),5]);
tbox.append([np.array(((153.2599725,	-9.030927835),
(157.9642366,	-4.577319588),
(163.1636864,	-7.793814433),
(162.4209078,	-11.75257732))),0]);
tbox.append([np.array(((119.0921596,	10.26804124),
(122.3108666,	24.37113402),
(125.2819807,	22.88659794),
(122.5584594,	10.7628866))),5]);
tbox.append([np.array(((112.1595598,	-35.75257732),
(116.8638239,	-33.03092784),
(117.8541953,	-34.51546392),
(113.8927098,	-37.48453608))),0]);
tbox.append([np.array(((62.64099037,	-23.3814433),
(78.23933975,	-18.68041237),
(78.4869326,	-22.39175258),
(64.869326,	-25.60824742))),0]);
tbox.append([np.array(((51.49931224,	-5.072164948),
(50.26134801,	-0.618556701),
(48.03301238,	-1.113402062),
(48.04301238,	-5.072164948))),0]);
tbox.append([np.array(((38.62448418,	-4.082474227),
(43.08115543,	1.113402062),
(38.62448418,	3.587628866),
(36.6437414,	-2.597938144))),0]);
tbox.append([np.array(((45.30949106,	2.845360825),
(49.76616231,	2.845360825),
(48.77579092,	0.618556701),
(46.0522696,	1.113402062))),0]);
tbox.append([np.array(((42.09078404,	-6.804123711),
(46.0522696,	-7.793814433),
(44.56671252,	-9.525773196),
(41.3480055,	-10.02061856))),0]);
tbox.append([np.array(((62.64099037,	-32.04123711),
(39.36726272,	-31.05154639),
(37.63411279,	-34.26804124),
(59.42228336,	-35.50515464))),0]);
tbox.append([np.array(((61.65061898,	-38.72164948),
(47.53782669,	-37.73195876),
(48.03301238,	-39.95876289),
(57.44154058,	-41.69072165))),0]);
tbox.append([np.array(((9.903713893,	-48.37113402),
(16.09353508,	-48.37113402),
(17.82668501,	-53.56701031),
(10.64649243,	-53.81443299))),6]);
tbox.append([np.array(((21.54057772,	-55.05154639),
(30.94910591,	-58.51546392),
(18.56946355,	-70.1443299),
(8.418156809,	-65.44329897))),6]);
tbox.append([np.array(((103.741403,	-49.36082474),
(106.2173315,	-47.87628866),
(107.4552957,	-48.86597938),
(105.2269601,	-50.59793814))),0]);
tbox.append([np.array(((97.79917469,	-28.57731959),
(102.0082531,	-23.62886598),
(104.9793673,	-26.59793814),
(100.2751032,	-30.55670103))),0]);
tbox.append([np.array(((106.2173315,	-28.82474227),
(108.4456671,	-26.35051546),
(109.6836314,	-27.09278351),
(108.1980743,	-28.82474227))),0]);
tbox.append([np.array(((29.46354883,	-38.96907216),
(30.94910591,	-43.91752577),
(31.9394773,	-43.17525773),
(30.45392022,	-38.4742268))),0]);
tbox.append([np.array(((126.519945,	26.35051546),
(129.4910591,	33.03092784),
(126.2723521,	34.02061856),
(122.0632737,	30.55670103))),0]);
tbox.append([np.array(((109.4360385,	43.42268041),
(114.6354883,	38.22680412),
(109.4360385,	36.98969072),
(106.96011,	40.70103093))),0]);
tbox.append([np.array(((112.6547455,	36.98969072),
(117.3590096,	32.28865979),
(118.349381,	33.77319588),
(113.8927098,	37.97938144))),0]);
tbox.append([np.array(((113.1499312,	23.3814433),
(111.911967,	25.36082474),
(110.9215956,	23.62886598),
(111.911967,	23.13402062))),0]);
tbox.append([np.array(((104.7317744,	35.01030928),
(102.5034388,	36.98969072),
(97.303989,	33.03092784),
(98.78954608,	30.06185567))),0]);
tbox.append([np.array(((93.09491059,	26.84536082),
(98.78954608,	30.06185567),
(98.04676754,	31.05154639),
(92.84731774,	27.58762887))),0]);
tbox.append([np.array(((94.58046768,	30.55670103),
(99.03713893,	32.28865979),
(98.29436039,	33.77319588),
(94.33287483,	31.54639175))),0]);
tbox.append([np.array(((83.43878955,	26.59793814),
(94.82806052,	46.88659794),
(73.53507565,	42.68041237),
(75.76341128,	28.08247423))),4]);
tbox.append([np.array(((59.91746905,	25.36082474),
(60.90784044,	26.10309278),
(59.6698762,	26.59793814),
(58.67950481,	25.60824742))),0]);
tbox.append([np.array(((56.94635488,	28.57731959),
(59.17469051,	32.04123711),
(56.20357634,	32.28865979),
(54.47042641,	28.32989691))),0]);
tbox.append([np.array(((55.4607978,	23.13402062),
(56.20357634,	25.11340206),
(54.47042641,	25.36082474),
(54.47042641,	23.62886598))),0]);
tbox.append([np.array(((45.80467675,	19.91752577),
(45.06189821,	20.65979381),
(47.53782669,	27.58762887),
(48.28060523,	27.09278351))),0]);
tbox.append([np.array(((39.11966988,	24.12371134),
(41.8431912,	27.58762887),
(40.60522696,	28.57731959),
(38.37689133,	24.86597938))),0]);
tbox.append([np.array(((45.06189821,	31.54639175),
(44.56671252,	32.28865979),
(46.5474553	,34.02061856),
(47.29023384,	33.27835052))),0]);
tbox.append([np.array(((32.434663,	30.55670103),
(30.20632737,	31.29896907),
(31.9394773	,35.25773196),
(32.92984869,	33.03092784))),0]);
tbox.append([np.array(((28.47317744,	34.51546392),
(28.96836314,	36.74226804),
(25.74965612,	39.71134021),
(24.75928473,	37.2371134))),0]);
tbox.append([np.array(((38.87207703,	5.319587629),
(38.12929849,	5.319587629),
(39.86244842,	11.01030928),
(40.60522696,	11.01030928))),0]);
tbox.append([np.array(((1.733149931,	33.03092784),
(-0.742778542,	34.7628866),
(1.980742779,	37.73195876),
(2.72352132,	36.24742268))),0]);
tbox.append([np.array(((-1.237964237,	40.20618557),
(-3.466299862,	43.42268041),
(-1.980742779,	43.67010309),
(-0.247592847,	41.93814433))),0]);
tbox.append([np.array(((-62.88858322,	-11.25773196),
(-58.43191197,	-3.340206186),
(-61.89821183,	-0.12371134),
(-68.08803301,	-7.298969072))),7]);
tbox.append([np.array(((-65.11691884,	-0.371134021),
(-66.60247593,	4.082474227),
(-64.869326,	4.577319588),
(-63.38376891,	0.618556701))),7]);
tbox.append([np.array(((-67.34525447,	7.051546392),
(-65.36451169,	11.75257732),
(-62.64099037,	8.536082474),
(-64.62173315,	7.051546392))),7]);
tbox.append([np.array(((-69.5735901,	16.45360825),
(-62.88858322,	16.20618557),
(-61.15543329,	28.32989691),
(-66.85006878,	30.30927835))),8]);
tbox.append([np.array(((-58.43191197,	28.82474227),
(-56.45116919,	33.77319588),
(-60.90784044,	36),
(-63.38376891,	31.29896907))),8]);
tbox.append([np.array(((-70.06877579,	29.81443299),
(-69.82118294,	36.74226804),
(-85.17193948,	36.24742268),
(-90.12379642,	32.78350515))),8]);
tbox.append([np.array(((-94.08528198,	25.8556701),
(-89.62861073,	29.07216495),
(-92.1045392,	31.05154639),
(-96.31361761,	28.08247423))),0]);
tbox.append([np.array(((-96.06602476,	29.56701031),
(-97.05639615,	31.79381443),
(-114.3878955,	29.81443299),
(-109.4360385,	27.58762887))),0]);
tbox.append([np.array(((-98.78954608,	33.5257732),
(-97.05639615,	37.2371134),
(-100.0275103,	37.48453608),
(-100.7702889,	34.26804124))),0]);
tbox.append([np.array(((-73.28748281,	-14.96907216),
(-76.50618982,	-3.340206186),
(-82.94360385,	-2.350515464),
(-79.47730399,	-15.46391753))),9]);
tbox.append([np.array(((-83.93397524,	-4.082474227),
(-84.18156809,	-1.113402062),
(-93.59009629,	-1.113402062),
(-92.84731774,	-4.329896907))),9]);
tbox.append([np.array(((-93.59009629,	-4.577319588),
(-95.81843191,	-3.835051546),
(-97.79917469,	-8.041237113),
(-96.06602476,	-8.288659794))),9]);
tbox.append([np.array(((-108.69326,	19.91752577),
(-106.96011,	21.15463918),
(-109.9312242,	23.87628866),
(-110.6740028,	22.1443299))),0]);
tbox.append([np.array(((-162.9160935,	24.6185567),
(-162.6685007,	27.09278351),
(-167.1251719,	29.31958763),
(-167.6203576,	27.09278351))),0]);
tbox.append([np.array(((-171.3342503,	16.94845361),
(-170.8390646,	17.69072165),
(-172.8198074,	18.43298969),
(-173.8101788,	17.19587629))),0]);
tbox.append([np.array(((-171.5818432,	27.58762887),
(-168.3631362,	32.28865979),
(-172.0770289,	33.27835052),
(-174.3053645,	28.82474227))),0]);
tbox.append([np.array(((-178.2668501,	31.29896907),
(-178.2668501,	33.27835052),
(-180,	34.51546392),
(-180,	32.28865979))),0]);
tbox.append([np.array(((169.8486933,	43.17525773),
(174.0577717,	42.43298969),
(173.562586,	40.94845361),
(170.5914718,	41.69072165))),0]);
tbox.append([np.array(((168.8583219,	41.44329897),
(170.8390646,	40.20618557),
(170.0962861,	38.72164948),
(169.1059147,	39.21649485))),0]);
tbox.append([np.array(((171.829436,	39.21649485),
(181.9807428,	38.4742268),
(181.9807428,	35.25773196),
(172.3246217,	37.48453608))),0]);
tbox.append([np.array(((181.9807428,	34.7628866),
(178.0192572,	36),
(178.5144429,	33.5257732),
(180.4951857,	33.03092784))),0]);
tbox.append([np.array(((-67.09766162,	-26.35051546),
(-64.869326,	-26.35051546),
(-64.3741403,	-28.57731959),
(-67.09766162,	-28.57731959))),0]);
tbox.append([np.array(((27.3983447283195, 47.01881331403763),
(52.78877293990638, 42.06946454413893),
(62.11586901763221, 54.57308248914617),
(46.31162288593015, 58.74095513748191))),10]);
tbox.append([np.array(((93.46527527887721, 64.73227206946454),
(124.29650953580418, 65.5137481910275),
(123.51925152932702, 69.16063675832127),
(97.092479309104, 67.07670043415341))),11]);
tbox.append([np.array(((9.521410579345059, 53.27062228654125),
(83.87909319899236, 68.37916063675833),
(89.5789852464915, 74.63096960926194),
(13.148614609571752, 75.67293777134587))),3]);
tbox.append([np.array(((-27.527887729399083, 53.27062228654125),
(-15.350845627923746, 57.17800289435601),
(-15.86901763224185, 61.866859623733724),
(-26.232457718603825, 59.0014471780029))),0]);
tbox.append([np.array(((-58.10003598416699, 60.82489146164979),
(-50.586541921554556, 56.65701881331404),
(-45.1457358762145, 60.04341534008683),
(-53.695573947463146, 62.12735166425471))),0]);
tbox.append([np.array(((-16.1281036344009, 70.20260492040521),
(-0.8420295070169459, 68.63965267727932),
(-0.0647715005397913, 72.54703328509407),
(-14.832673623605643, 77.23589001447178))),0]);
tbox.append([np.array(((-49.2911119107593, 75.93342981186686),
(-17.16444764303708, 73.589001447178),
(-15.350845627923746, 76.71490593342982),
(-45.66390788053258, 78.5383502170767))),0]);
tbox.append([np.array(((-72.09068010075569, 72.80752532561506),
(-58.10003598416699, 71.24457308248915),
(-57.06369197553079, 76.19392185238785),
(-67.68621806405183, 76.45441389290883))),0]);
tbox.append([np.array(((-130.90320259086002, 56.65701881331404),
(-120.28067650233899, 50.92619392185239),
(-112.76718243972654, 62.908827785817664),
(-131.93954659949623, 62.38784370477569))),12]);
tbox.append([np.array(((-163.8071248650594, 53.531114327062234),
(-160.69809283915077, 52.74963820549928),
(-158.36631881971934, 67.59768451519537),
(-161.73443684778698, 68.90014471780029))),0]);
tbox.append([np.array(((67.55667506297223, 45.45586107091173),
(72.47930910399421, 45.45586107091173),
(73.25656711047137, 47.27930535455861),
(71.442965095358, 49.1027496382055))),4]);
tbox.append([np.array(((75.84742713206188, 45.97684515195369),
(82.32457718603806, 47.01881331403763),
(81.02914717524285, 50.14471780028944),
(74.29291111910757, 50.14471780028944))),4]);
tbox.append([np.array(((85.17452320978768, 46.237337192474676),
(92.16984526808201, 46.49782923299566),
(86.21086721842383, 52.74963820549928),
(83.36092119467432, 51.44717800289436))),4]);
tbox.append([np.array(((81.2882331774019, 52.74963820549928),
(83.10183519251521, 55.35455861070912),
(78.69737315581139, 57.95947901591896),
(77.14285714285708, 57.43849493487699))),4]);
tbox.append([np.array(((63.670385030586516, 55.6150506512301),
(74.81108312342568, 56.91751085383502),
(75.58834112990283, 59.0014471780029),
(66.77941705649508, 58.74095513748191))),4]);
tbox.append([np.array(((124.55559553796328, 49.36324167872649),
(129.4782295789852, 45.195369030390744),
(145.80064771500534, 55.09406657018814),
(140.61892767182437, 57.95947901591896))),13]);

#convert tbox from -180 to 180 to 0 to 360
for i in range(0,len(tbox)):
    tbox[i][0][:,0] += 180; #in place increment
#END FOR i
for i in range(0,len(tbox)):
    tbox[i][0][tbox[i][0][:,0] > 360,0] = 360; #keep right
#END FOR i


#--- deliniate out which platforms to use ---
if( paths == 'all' ):
    keyz = list(platformPaths.keys()); #get all the keyz
else:
    if( paths == list ):
        keyz = paths; #manual
    else:
        keyz = [paths]; #manual
    #END IF
#END IF

locz_dict = {}; #prep a dict
obz_dict = {}; #prep a dict
for k in range(0,len(keyz)):
    #--- build path interpolator ---
    platformPath_raw = platformPaths[keyz[k]]; #get the path needed
    platformPath_interper = interpolate.UnivariateSpline(platformPath_raw[:,0],platformPath_raw[:,1]); #use this to input any day portion and get out latitudes
    
    #--- build a big array of everything ---
    locz = np.empty((np.int64(circums*dataPtsPerCircum)+1,3)); #preallocate [long, lat, time days]
    locz[:,2] = np.arange(0,days*86400+1/dataRate,1/dataRate)/86400; #[days]
    locz[:,1] = platformPath_interper(locz[:,2]); #calc the latitudes
    locz[:,0] = np.mod(-locz[:,2]/daysPerCircum*longPerCircum+landingCoords[0],360); #calc longitudes
    obz = np.zeros((np.int64(circums*dataPtsPerCircum)+1),dtype=np.bool_); #preallocate
    isinBig = np.zeros((np.int64(circums*dataPtsPerCircum)+1),dtype=np.bool_); #preallocate
    
    #--- ray trace the points within all of the boxes ---
    if( (os.path.isfile('tesseraeObsPickle_'+keyz[k]+'.pkl') == True) & (cacheItUp == True) ): #try to load it from pre-calc'd stuff
        with open('tesseraeObsPickle_'+keyz[k]+'.pkl','rb') as fPkl:
            obz, obz_inTot, obz_in, obz_inOrdered = pkl.load(fPkl); #load a pickle
        #END WITH
    else: #otherwise calc it
        obz_in = []; #Prep list
        obz_inTot = 0; #prep cntr
        for i in range(0,len(tbox)): #cruise through every tbox
            #--- build reference vectors ---
            #inner is a faster dot apparently
            # if( np.all(tbox[i][0][0,0] < tbox[i][0][1:,0]) == False ): #1st pt gotta be left most
            #     tbox[i][0] = np.roll(tbox[i][0],np.where(np.flipud(tbox[i][0])[:,0].min() == np.flipud(tbox[i][0])[:,0])[0][0]*2+2); #fix the orientation
            # #END IF
            V12 = np.array( ((tbox[i][0][1,0]-tbox[i][0][0,0]),(tbox[i][0][1,1]-tbox[i][0][0,1])) ); #build it
            M12 = np.sqrt(np.inner(V12,V12)); #fastest magntiude calc in the west
            V14 = np.array( ((tbox[i][0][3,0]-tbox[i][0][0,0]),(tbox[i][0][3,1]-tbox[i][0][0,1])) ); #build it
            M14 = np.sqrt(np.inner(V14,V14)); #fastest magntiude calc in the west
            V32 = np.array( ((tbox[i][0][1,0]-tbox[i][0][2,0]),(tbox[i][0][1,1]-tbox[i][0][2,1])) ); #build it
            M32 = np.sqrt(np.inner(V32,V32)); #fastest magntiude calc in the west
            V34 = np.array( ((tbox[i][0][3,0]-tbox[i][0][2,0]),(tbox[i][0][3,1]-tbox[i][0][2,1])) ); #build it
            M34 = np.sqrt(np.inner(V34,V34)); #fastest magntiude calc in the west
            #calc cos(theta) instead of theta for angles
            c1214 = np.inner(V12,V14)/(M12*M14); #cos(Theta12,14) is this, don't calc the cos for speed
            c3234 = np.inner(V32,V34)/(M32*M34); #cos(Theta32,34) is this, don't calc the cos for speed
    
            #--- make sure pts are possibly in ---
            kk = (tbox[i][0][:,0].max() >= locz[:,0]) & (tbox[i][0][:,0].min() <= locz[:,0]) & (tbox[i][0][:,1].max() >= locz[:,1]) & (tbox[i][0][:,1].min() <= locz[:,1]); #only look at pts within the current box maximal range
            if( kk.sum() > 0 ):
                V1p = np.empty((kk.sum(),2)); #preallocate
                V3p = np.empty((kk.sum(),2)); #preallocate
                #--- calc vects for every point ---
                V1p[:,0] = locz[kk,0]-tbox[i][0][0,0]; #calc long
                V1p[:,1] = locz[kk,1]-tbox[i][0][0,1]; #calc lat
                M1p = np.sqrt(np.einsum('...i,...i', V1p, V1p)); #memory error says to einsum (equiv to np.sqrt(V1p[:,0]**2+V1p[:,1]**2) but prolly faster b/c einstein
                V3p[:,0] = locz[kk,0]-tbox[i][0][2,0]; #calc long
                V3p[:,1] = locz[kk,1]-tbox[i][0][2,1]; #calc lat
                M3p = np.sqrt(np.einsum('...i,...i', V3p, V3p)); #memory error says to einsum (equiv to np.sqrt(V1p[:,0]**2+V1p[:,1]**2) but prolly faster b/c einstein
                #calc cos(theta) instead of theta for angles
                c121p = np.einsum('...i,...i', V12, V1p)/(M12*M1p);
                c141p = np.einsum('...i,...i', V14, V1p)/(M14*M1p);
                c323p = np.einsum('...i,...i', V32, V3p)/(M32*M3p);
                c343p = np.einsum('...i,...i', V34, V3p)/(M34*M3p);
                
                #--- is in? ---
                isin = ((c121p >= c1214) & (c141p >= c1214) & (c323p >= c3234) & (c343p >= c3234)); #record if it is in
                isinBig = isinBig & False; #false it out
                isinBig[kk] = isin; #put in the right spots
                # #patch b/c I don't feel like finding out what's so wrong
                # if( np.all( tbox[i][0][:,1].max() < locz[isin,1] ) | np.all( tbox[i][0][:,1].min() > locz[isin,1] ) ):
                #     isin = isin & False; #fix it with a hammer
                # #END IF
                if( isinBig.sum() > 0 ):
                    isinDiff = np.diff(isinBig); #get the diff
                    if(isinBig[0] == True):
                        isinDiff = np.insert(isinDiff,0,True); #make diff match length and catch if it starts in the area
                    else:
                        isinDiff = np.insert(isinDiff,0,False); #make diff match length
                    #END IF
                    if(isinBig[-1] == True):
                        isinDiff[-1] = True; #catch if it ends on a detection
                    #END IF
                    isinDiffWhere = np.where(isinDiff==True)[0];
                    for j in np.arange(0,isinDiff.sum(),2):
                        #catch where not enough pts to confirm tesserae
                        if( (isinDiffWhere[j+1]-isinDiffWhere[j]) < ptsInTesseraeReq ):
                            isinBig[isinDiffWhere[j]:isinDiffWhere[j+1]] = False; #set to false b/c not actually good data
                        else:
                            obz_inTot += 1; #increment
                            obz_in.append((obz_inTot,isinDiffWhere[j],isinDiffWhere[j+1],i,tbox[i][1],locz[isinDiffWhere[j]],locz[isinDiffWhere[j+1]])); #append on the number of obz in and the indexes of the data and the box it was in
                        #END IF
                    #END FOR j
                    obz = obz | isinBig; #include that
                #END IF
            #END IF
        #END FOR i
        obz_inOrder = np.empty(len(obz_in),dtype=np.int64); #prep
        for i in range(0,len(obz_in)):
            obz_inOrder[i] = obz_in[i][1]; #get the init times
        #END FOR i    
        obz_inOrderSortIdx = np.argsort(obz_inOrder); #sort them
        obz_inOrdered = []; #prep
        for i in range(0,len(obz_in)):
            obz_inOrdered.append(obz_in[obz_inOrderSortIdx[i]]); #build it
        #END FOR i    
        obz_inOrder_zones = np.empty(len(obz_in),dtype=np.int64); #prep
        for i in range(0,len(obz_in)):
            obz_inOrder_zones[i] = obz_in[i][1]; #get the init times
        #END FOR i    
        obz_inOrderSortIdx = np.argsort(obz_inOrder_zones); #sort them
        obz_inOrdered_zones = []; #prep
        for i in range(0,len(obz_in)):
            obz_inOrdered_zones.append(obz_in[obz_inOrderSortIdx[i]]); #build it
        #END FOR i
        with open('tesseraeObsPickle_'+keyz[k]+'.pkl', 'wb') as fPkl:
            pkl.dump([obz, obz_inTot, obz_in, obz_inOrdered], fPkl); #dump to pickle
        #END WITH
    #END IF
    #--- get all the needed bitz into a dict ---
    locz_dict[keyz[k]] = np.copy(locz); #copy it over
    obz_dict[keyz[k]] = {}; #prep a sub-dict
    obz_dict[keyz[k]]['obz'] = np.copy(obz); #copy it over
    obz_dict[keyz[k]]['obz_inTot'] = np.copy(obz_inTot); #copy it over
    obz_dict[keyz[k]]['obz_in'] = obz_in.copy(); #copy it over
    obz_dict[keyz[k]]['obz_inOrdered'] = obz_inOrdered.copy(); #copy it over
    obz_dict[keyz[k]]['obz_inOrdered_zones'] = obz_inOrdered_zones.copy(); #copy it over
#END FOR k

#==============PLOT STANDARDIZATION STUFF==============
FONT_axisTick = 23; #small font (tick mark font size) Default: 19, Big: 23
FONT_axisLabel = 28; #medium font (labels) Default: 23, Big: 28
FONT_title = 28; #big font (title only really) Default: 23, Big: 28
FONT_grandiose = 32; #big font (title only really) Default: 26, Big: 32
FONT_font = 'arial';
FONT_weight = 'bold';

import matplotlib.font_manager as fm #import font manager you know
FONT_axisTickFM = fm.FontProperties(family=FONT_font, weight=FONT_weight, size=FONT_axisTick); #these are font properties, some plot stuff has this and it tells it all in one go #inconsistent
FONT_axisLabelFM = fm.FontProperties(family=FONT_font, weight=FONT_weight, size=FONT_axisLabel); #these are font properties, some plot stuff has this and it tells it all in one go #inconsistent
FONT_titleFM = fm.FontProperties(family=FONT_font, weight=FONT_weight, size=FONT_title); #these are font properties, some plot stuff has this and it tells it all in one go #inconsistent
FONT_grandioseFM = fm.FontProperties(family=FONT_font, weight=FONT_weight, size=FONT_grandiose); #these are font properties, some plot stuff has this and it tells it all in one go #inconsistent

plt.rcParams['font.weight'] = FONT_weight; #sents default font weight to bold for everything else
plt.rcParams['axes.labelweight'] = FONT_weight; #sets default font weight to bold for axis labels
plt.rc('font', size=FONT_axisTick); #default text size
plt.rc('xtick', labelsize=FONT_axisTick); #x tick label font size
plt.rc('ytick', labelsize=FONT_axisTick); #y tick label font size
plt.rc('legend', fontsize=FONT_axisLabel); #legend fornt size
plt.rc('figure', titlesize=FONT_title); #figure title font size (this one didn't do anything, so 2nd here also)
plt.rc('axes', titlesize=FONT_title); #figure title font size (this one did work)
plt.rcParams['axes.labelsize'] = FONT_axisLabel; #try this one also

#--- Visualize ---
fig, ax = plt.subplots(); #use instead of fig because it inits an axis too (I think I dunno)
figManager = plt.get_current_fig_manager(); #req to maximize
figManager.window.showMaximized(); #force maximized
#Remove the aspect ratio from the basemap so it fills the screen better
ax.set_aspect('auto');

#plot obs path
if( len(keyz) == 1 ):
    #make colorbar
    divider = make_axes_locatable(ax); #prep to add an axis
    cax = divider.append_axes('right', size='2.0%', pad=0.35); #make a color bar axis

    im = ax.scatter(locz[0::dataRate**3,0],locz[0::dataRate**3,1],s=10,c=locz[0::dataRate**3,2]/daysPerCircum,cmap='inferno');
    cbar = fig.colorbar(im, cax=cax, orientation='vertical'); #create a colorbar using the prev. defined cax
    cbar.ax.tick_params(labelsize=FONT_axisTick);
    # cax.yaxis.set_major_formatter(tick.FormatStrFormatter('%.2f')); #force a rounded format
    cbar.set_label('Circumnavigation #'); #tabel the colorbar
    cbar.ax.tick_params(labelsize=FONT_axisTick);
    # cbar.mappable.set_clim(vmin=np.min(plotLimValu), vmax=np.max(plotLimValu));
else:
    cmap_discrete = plt.cm.get_cmap('inferno', len(keyz)); #get a discrete inferno colormap
    im_list = [[] for k in range(0,len(keyz))]; #prep a list to hold all the ims
    keyz_present = [[] for k in range(0,len(keyz))]; #prep a list
    
    for k in range(0,len(keyz)):
        locz = locz_dict[keyz[k]]; #pull the right one out
        if( plot_toGoalOnly == False ):
            lenToGoTo = np.int64(circums*dataPtsPerCircum)+1+1; #whole distance
        else:
            obz_inOrdered = obz_dict[keyz[k]]['obz_inOrdered']; #pull the right one out
            lenToGoTo = obz_inOrdered[toGoal[k]-1][2]+1; #just enough
            ax.text(locz[lenToGoTo-1,0],locz[lenToGoTo-1,1],'\N{check mark}',color='xkcd:green blue',fontsize=40,zorder=1500,horizontalalignment='center',verticalalignment='center'); #put a checkmark there
            ax.text(locz[lenToGoTo-1,0],locz[lenToGoTo-1,1],'\N{check mark}',color='xkcd:white',fontsize=60,zorder=1499,horizontalalignment='center',verticalalignment='center'); #put a checkmark there
        #END IF
        im_list[k] = ax.scatter(locz[0:lenToGoTo:dataRate**5//2,0],locz[0:lenToGoTo:dataRate**5//2,1],s=10,color=cmap_discrete.colors[k]);
        keyz_present[k] = keyz[k].capitalize(); #make it presentable
    #END FOR k    
    leg = ax.legend(im_list,keyz_present,loc='lower right'); #make a legend
    leg.get_frame().set_alpha(1);
    # set the linewidth of each legend object
    for legobj in leg.legendHandles: #from https://stackoverflow.com/a/24707567
        legobj._sizes = [150];
    #END FOR legobj
#END IF

for k in range(0,len(keyz)):
    obz_inOrdered = obz_dict[keyz[k]]['obz_inOrdered']; #pull the right one out
    locz = locz_dict[keyz[k]]; #pull the right one out
    #plot viewed obs for verification
    if( plot_toGoalOnly == False ):
        lenToGoTo = len(obz_inOrdered); #hit em all
    else:
        lenToGoTo = toGoal[k]; #go to obs goal only
    #END IF
    for i in range(0,lenToGoTo):
        im_obs, = ax.plot(locz[obz_inOrdered[i][1]:obz_inOrdered[i][2]:dataRate**3,0],locz[obz_inOrdered[i][1]:obz_inOrdered[i][2]:dataRate**3,1],linewidth=5,c='xkcd:azure',zorder=1000);
        ax.plot(locz[obz_inOrdered[i][1]:obz_inOrdered[i][2]:dataRate**3,0],locz[obz_inOrdered[i][1]:obz_inOrdered[i][2]:dataRate**3,1],linewidth=7.5,c='xkcd:white',zorder=900);
        # ax.plot(np.concatenate( (np.array((locz[obz_inOrdered[i][1],0],)),locz[obz_inOrdered[i][1]:obz_inOrdered[i][2]:100000,0],np.array((locz[obz_inOrdered[i][2],0],))) ), \
        #         np.concatenate( (np.array((locz[obz_inOrdered[i][1],1],)),locz[obz_inOrdered[i][1]:obz_inOrdered[i][2]:100000,1],np.array((locz[obz_inOrdered[i][2],1],))) ), \
        #         marker='*',markersize=10,linewidth=3,c='xkcd:azure',zorder=1000);
    #END FOR i
#END FOR k

#plot tesserae boxes
for i in range(0,len(tbox)): #cruise through every tbox
    # i += 1; #for manual iterating through the tesserae boxes uncomment this and run this set w/o the for loop incrementally to see which is which [start at i = -1]
    temp_mapCoords = ( np.hstack( [np.linspace(tbox[i][0][0,1],tbox[i][0][1,1],20) , \
        np.linspace(tbox[i][0][1,1],tbox[i][0][2,1],20) , \
        np.linspace(tbox[i][0][2,1],tbox[i][0][3,1],20) , \
        np.linspace(tbox[i][0][3,1],tbox[i][0][0,1],20)] ) , \
        np.hstack( [np.linspace(tbox[i][0][0,0],tbox[i][0][1,0],20) , \
        np.linspace(tbox[i][0][1,0],tbox[i][0][2,0],20) , \
        np.linspace(tbox[i][0][2,0],tbox[i][0][3,0],20) , \
        np.linspace(tbox[i][0][3,0],tbox[i][0][0,0],20)] ) ); #convert to the geographic map coords
    im_tess, = ax.plot( temp_mapCoords[1],  #X longitude arcdeg
        temp_mapCoords[0],  #Y latitude arcdeg
        c='xkcd:fuchsia',linewidth=1.5, zorder=90);
#END FOR i

#plot landing point
im_landing, = ax.plot(landingCoords[0],landingCoords[1],marker='*', color='xkcd:red',linestyle='None', markersize=41,zorder=2000);
ax.plot(landingCoords[0],landingCoords[1],marker='*', color='xkcd:white', markersize=57,zorder=1999);

# #plot end of obs goal point
# for k in range(0,len(keyz)):
#     obz_inOrdered = obz_dict[keyz[k]]['obz_inOrdered']; #pull the right one out
#     locz = locz_dict[keyz[k]]; #pull the right one out
#     #plot viewed obs for verification
#     # ax.plot(locz[obz_inOrdered[obsGoal-1][2],0],locz[obz_inOrdered[obsGoal-1][2],1],marker='X', color='xkcd:fire engine red', markersize=20);
#     tx1 = ax.text(locz[obz_inOrdered[obsGoal-1][2],0],locz[obz_inOrdered[obsGoal-1][2],1],'\N{check mark}',color='xkcd:green blue',fontsize=40,zorder=1500,horizontalalignment='center',verticalalignment='center'); #put a checkmark there
#     ax.text(locz[obz_inOrdered[obsGoal-1][2],0],locz[obz_inOrdered[obsGoal-1][2],1],'\N{check mark}',color='xkcd:white',fontsize=60,zorder=1499,horizontalalignment='center',verticalalignment='center'); #put a checkmark there
# #END FOR k

leg_landing = im_landing;
leg_tess = im_tess;
leg_obs = im_obs;
leg_goal = mpatches.Patch(color='xkcd:green blue'); #tx1; 
leg2 = ax.legend(handles=[leg_landing,leg_tess,leg_obs],labels=['Deployment Location','Tesserae Regions','Tesserae Passover'],loc='lower left');
leg2.get_frame().set_alpha(1);
leg2.legendHandles[1].set_linewidth(5);
if( len(keyz) > 1 ):
    ax.add_artist(leg); #readd the other legend
#END

#venus image
if os.path.isfile('tesseraeMap.png'):
    img = plt.imread('tesseraeMap.png'); #read in image
    ax.imshow(img, extent=[0, 360, -90, 90]); #plot it
    ax.set_aspect('auto'); #reset aspect ratio to yolo
#END IF

#title stuff
# ax.set_title('Total # of Tesserae Observations with at least '+str(ptsInTesseraeReq)+' pts is '+str(obz_inTot)+\
#              ' for '+str(days)+' days/'+str(np.round(circums,2)).rstrip('0').rstrip('.')+' circumnavigations'+\
#              '\n'+str(np.round(locz[obz_inOrdered[obsGoal-1][2],2],2)).rstrip('0').rstrip('.')+' days/'+str(np.round(locz[obz_inOrdered[obsGoal-1][2],2]/daysPerCircum,2)).rstrip('0').rstrip('.')+' cnav to reach '+str(obsGoal)+' TessObs @ red x',fontproperties=FONT_titleFM); #set the title
# ax.set_title('Total # of Tesserae Observations with at least '+str(ptsInTesseraeReq)+' pts is '+str(obz_inTot)+\
#              ' for '+str(days)+' days/'+str(np.round(circums,2)).rstrip('0').rstrip('.')+' circumnavigations',\
#              fontproperties=FONT_titleFM,y=1.015); #set the title
#x axis stuff
ax.set_xlabel('Longitude [deg]',fontproperties=FONT_axisLabelFM);
ax.set_xlim((0,360)); #set the xlims now
ax.set_xticks(np.arange(0,360+30,30)); #set xticks
labelz = ax.get_xticklabels(); #get x tick labels
labelzNew = np.arange(-180,180+30,30);
for i in range(0,len(labelz)):
    labelz[i].set_text(str(labelzNew[i])); #convert from 0to360 to -180to180
#END FOR i
ax.set_xticklabels(labelz); #set the labelz
#y axis stuff
ax.set_ylabel('Latitude [deg]',fontproperties=FONT_axisLabelFM);
ax.set_ylim((-plot_latLim,plot_latLim)); #set the ylims now
ax.set_yticks(np.arange(-plot_latLim,plot_latLim+plot_latSpacing,plot_latSpacing)); #set yticks
#fit that fig fast
try:
    figFitter(fig); #fit that fig
except:
    fig.tight_layout(); #fit that fig less fit
#END TRY

for k in range(0,len(keyz)):
    obz_inTot = obz_dict[keyz[k]]['obz_inTot']; #pull the right one out
    obz_inOrdered = obz_dict[keyz[k]]['obz_inOrdered']; #pull the right one out
    locz = locz_dict[keyz[k]]; #pull the right one out
    print('Total # of Tesserae Observations with at least '+str(ptsInTesseraeReq)+' pts for '+keyz[k]+' path is '+str(obz_inTot)+\
        ' for '+str(days)+' days/'+str(np.round(circums,2)).rstrip('0').rstrip('.')+' circumnavigations'+\
        '\n'+str(np.round(locz[obz_inOrdered[obsGoal-1][2],2],2)).rstrip('0').rstrip('.')+' days/'+str(np.round(locz[obz_inOrdered[obsGoal-1][2],2]/daysPerCircum,2)).rstrip('0').rstrip('.')+' circumnavigations to reach '+str(obsGoal)+' Tesserae Observations\n')
#END FOR k


